"use client";
import React, { useEffect, useState } from "react";
import { useConnectModal } from "@rainbow-me/rainbowkit";
import { useAccount } from "wagmi";
import { useVoting } from "../hooks/useVoting";
import VoteButton from "./VoteButton";
import { Avatar, Box, Button, Card, Flex, Text } from "@radix-ui/themes";
import { Cross1Icon } from "@radix-ui/react-icons";

"use client";
import React, { useEffect, useState } from "react";
import { useConnectModal } from "@rainbow-me/rainbowkit";
import { useAccount } from "wagmi";
import { useVoting } from "../hooks/useVoting";
import VoteButton from "./VoteButton";
import { Avatar, Box, Button, Card, Flex, Text } from "@radix-ui/themes";
import { Cross1Icon } from "@radix-ui/react-icons";

interface VotingProps {
  questionId: number;
  primary?: boolean;
}

interface QuestionData {
  question: string;
  createdBy: string;
  possibleAnswers: [string, string];
  image: string;
  voteCounts: [string, string];
}

interface VotingProps {
  questionId: number;
  primary?: boolean;
}

export default function Voting({ questionId, primary = true }: VotingProps) {
  const { address, isConnected } = useAccount();
  const { openConnectModal } = useConnectModal();
  const { getQuestion, vote, clearVote, hasVoted } = useVoting();


  const [userHasVoted, setUserHasVoted] = useState<boolean>(false);
  const [votedFor, setVotedFor] = useState<number | null>(null);
  const [loading, setLoading] = useState(false);
  const [questionData, setQuestionData] = useState<{
    question: string;
    createdBy: string;
    possibleAnswers: [string, string];
    image: string;
    voteCounts: [string, string];
  } | null>(null);

  useEffect(() => {
    const loadQuestionData = async () => {
      if (!questionId) return;
      
      const data = await getQuestion(questionId);
      if (data) {
        setQuestionData(data);
        if (address) {
          const voted = await hasVoted(questionId, address);
          setUserHasVoted(voted);
        }
      }
    };
    loadQuestionData();
  }, [questionId, address, getQuestion, hasVoted]);

  const handleVote = async (answerIndex: number) => {
    if (!isConnected) {
      openConnectModal?.();
      return;
    }
    setLoading(true);
    try {
      await vote(questionId, answerIndex);
      setVotedFor(answerIndex);
      setUserHasVoted(true);
      const data = await getQuestion(questionId);
      if (data) {
        setQuestionData(data);
      }
    } catch (error) {
      console.error("Error voting:", error);
    } finally {
      setLoading(false);
    }
  };

  const handleClearVote = async () => {
    if (!isConnected) {
      openConnectModal?.();
      return;
    }
    setLoading(true);
    try {
      await clearVote(questionId);
      setUserHasVoted(false);
      setVotedFor(null);
      const data = await getQuestion(questionId);
      if (data) {
        setQuestionData(data);
      }
    } catch (error) {
      console.error("Error clearing vote:", error);
    } finally {
      setLoading(false);
    }
  };

  if (!questionData) {
    return (
      <Card>Loading...</Card>
    );
  }

  const totalVotes = questionData.voteCounts.reduce(
    (acc, curr) => acc + Number(curr),
    0
  );

  return (
    <Flex justify="center" className="my-10 px-4">
      {primary ? (
        <Box maxWidth="650px" width="100%">
          <div className="card-bg p-6">
            <Flex gap="3" align="center" className="mb-4">
              <Text as="div" size="2" align="center" weight="light">
                Your vote is confidential and cannot be linked back to you.
              </Text>
            </Flex>

            <Card variant="surface" className="mb-6">
              <Flex justify="between">
                <Flex gap="3" align="center">
                  <Avatar
                    size="7"
                    src={questionData.image}
                    radius="medium"
                    fallback={questionData.question.slice(0, 2).toUpperCase()}
                  />
                  <Box>
                    <Text as="div" size="5" weight="bold">
                      {questionData.question}
                    </Text>
                    <Text as="div" size="2" color="gray">
                      <div className="flex gap-2 items-center">
                        <div>Created by: </div>
                        <Avatar
                          size="1"
                          src={`https://api.dicebear.com/9.x/notionists-neutral/svg?seed=${questionData.createdBy}`}
                          radius="medium"
                          fallback="T"
                        />
                        <div>
                          {questionData.createdBy.slice(0, 6)}...
                          {questionData.createdBy.slice(-4)}
                        </div>
                      </div>
                    </Text>
                    <div className="flex justify-around w-full mt-2 gap-5">
                      {!isConnected ? (
                        <div className="text-center w-full">
                          <Button
                            onClick={() => openConnectModal?.()}
                            className="w-full"
                            size="3"
                            color="indigo"
                          >
                            Connect your wallet to vote
                          </Button>
                        </div>
                      ) : !userHasVoted ? (
                        <div className="flex gap-4 w-full">
                          {questionData.possibleAnswers.map((ans, idx) => (
                            <VoteButton
                              key={idx}
                              onClick={() => handleVote(idx)}
                              disabled={loading || !isConnected}
                              selected={votedFor === idx}
                            >
                              {ans}
                            </VoteButton>
                          ))}
                        </div>
                      ) : (
                        <div className="text-center w-full py-4 font-medium">
                          <div>
                            <Button
                              onClick={handleClearVote}
                              size="2"
                              variant="outline"
                              color="red"
                              className="mt-3"
                              disabled={loading}
                            >
                              {loading ? "Processing..." : "Clear Vote"}
                            </Button>
                          </div>
                        </div>
                      )}
                    </div>
                  </Box>
                </Flex>
              </Flex>
            </Card>
          </div>
        </Box>
      ) : (
        <div></div>
      )}
    </Flex>
  );
  );
};

}